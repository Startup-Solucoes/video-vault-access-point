
import { supabase } from '@/integrations/supabase/client';

export interface ClientUser {
  id: string;
  user_email: string;
  client_id: string;
  created_at: string;
}

export interface CreateUserResult {
  user: {
    id: string;
    email: string;
  };
  password: string;
}

export const fetchClientUsers = async (clientId: string): Promise<ClientUser[]> => {
  if (!clientId) return [];

  console.log('üîç Buscando usu√°rios do cliente:', clientId);
  
  const { data, error } = await supabase
    .from('client_users')
    .select('*')
    .eq('client_id', clientId)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('‚ùå Erro ao buscar usu√°rios do cliente:', error);
    throw new Error(`Erro ao buscar usu√°rios: ${error.message}`);
  }

  console.log('‚úÖ Usu√°rios encontrados:', data?.length || 0);
  return data || [];
};

export const addClientUser = async (
  clientId: string, 
  userEmail: string, 
  adminId: string
): Promise<CreateUserResult> => {
  console.log('üë§ Criando usu√°rio para cliente:', { clientId, userEmail, adminId });

  // Valida√ß√£o de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(userEmail)) {
    throw new Error('Email inv√°lido');
  }

  // Verificar se o email j√° existe
  const { data: existingUsers } = await supabase
    .from('client_users')
    .select('user_email')
    .eq('user_email', userEmail.toLowerCase());

  if (existingUsers && existingUsers.length > 0) {
    throw new Error('Este email j√° est√° cadastrado no sistema');
  }

  try {
    const { data, error } = await supabase.functions.invoke('create-client-user', {
      body: {
        client_id: clientId,
        user_email: userEmail.toLowerCase(),
        admin_id: adminId
      }
    });

    if (error) {
      console.error('‚ùå Erro na fun√ß√£o create-client-user:', error);
      throw new Error(error.message || 'Erro ao criar usu√°rio');
    }

    if (!data || !data.user || !data.password) {
      console.error('‚ùå Resposta inv√°lida da fun√ß√£o:', data);
      throw new Error('Resposta inv√°lida do servidor');
    }

    console.log('‚úÖ Usu√°rio criado com sucesso:', data.user.email);
    
    // N√ÉO enviar email de confirma√ß√£o - usu√°rio pode acessar diretamente
    console.log('‚ÑπÔ∏è Email de confirma√ß√£o desabilitado - usu√°rio pode fazer login diretamente');
    
    return {
      user: data.user,
      password: data.password
    };
  } catch (error) {
    console.error('üí• Erro ao criar usu√°rio:', error);
    throw error;
  }
};

export const removeClientUser = async (clientUserId: string): Promise<void> => {
  console.log('üóëÔ∏è Removendo usu√°rio:', clientUserId);

  const { error } = await supabase.functions.invoke('delete-client-user', {
    body: { client_user_id: clientUserId }
  });

  if (error) {
    console.error('‚ùå Erro ao remover usu√°rio:', error);
    throw new Error(`Erro ao remover usu√°rio: ${error.message}`);
  }

  console.log('‚úÖ Usu√°rio removido com sucesso');
};
