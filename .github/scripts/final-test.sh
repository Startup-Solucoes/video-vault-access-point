
#!/bin/bash

TIMESTAMP=$1

echo "=== TESTE FINAL - DEPLOY $TIMESTAMP ==="
echo "Data/Hora: $(date)"

# 1. Verificar se o Nginx est√° rodando
echo "1. Verificando status do Nginx..."
NGINX_STATUS=$(sudo systemctl is-active nginx)
echo "Status Nginx: $NGINX_STATUS"

if [ "$NGINX_STATUS" != "active" ]; then
    echo "‚ùå ERRO: Nginx n√£o est√° ativo!"
    exit 1
fi

# 2. Testar conectividade b√°sica
echo "2. Testando conectividade b√°sica..."

# Testar dom√≠nio do servidor (tutoriaiserp.com.br)
echo "2a. Testando dom√≠nio do servidor (tutoriaiserp.com.br)..."
SERVER_HTTP_STATUS=""
for i in {1..3}; do
    SERVER_HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -I https://tutoriaiserp.com.br/ --connect-timeout 15 --max-time 45)
    if [ "$SERVER_HTTP_STATUS" = "200" ] || [ "$SERVER_HTTP_STATUS" = "301" ] || [ "$SERVER_HTTP_STATUS" = "302" ]; then
        break
    fi
    echo "Tentativa $i falhou, tentando novamente..."
    sleep 5
done
echo "Status HTTP dom√≠nio do servidor: $SERVER_HTTP_STATUS"

if [ "$SERVER_HTTP_STATUS" = "200" ] || [ "$SERVER_HTTP_STATUS" = "301" ] || [ "$SERVER_HTTP_STATUS" = "302" ]; then
    echo "‚úÖ Dom√≠nio do servidor acess√≠vel"
else
    echo "‚ö†Ô∏è Dom√≠nio do servidor com problemas (Status: $SERVER_HTTP_STATUS) - Continuando..."
fi

# 3. Verificar certificados SSL
echo "3. Verificando certificados SSL..."

# Certificado do dom√≠nio do servidor
echo "3a. Verificando SSL do dom√≠nio do servidor..."
if [ -f "/etc/letsencrypt/live/tutoriaiserp.com.br/fullchain.pem" ]; then
    SERVER_SSL_INFO=$(echo | timeout 15 openssl s_client -servername tutoriaiserp.com.br -connect tutoriaiserp.com.br:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null)
    if [ $? -eq 0 ]; then
        echo "‚úÖ SSL funcionando para dom√≠nio do servidor"
        echo "Certificado expira: $SERVER_SSL_INFO"
    else
        echo "‚ùå Problema no SSL do dom√≠nio do servidor"
    fi
else
    echo "‚ÑπÔ∏è Certificado para dom√≠nio do servidor n√£o encontrado"
fi

# 4. Testar headers de deploy
echo "4. Verificando headers de deploy..."
DEPLOY_HEADER=$(curl -s -I https://tutoriaiserp.com.br/ | grep -i "X-Deploy-Time" | cut -d' ' -f2- | tr -d '\r\n')
echo "Header X-Deploy-Time: $DEPLOY_HEADER"

if [ -n "$DEPLOY_HEADER" ]; then
    echo "‚úÖ Header de deploy presente"
else
    echo "‚ùå Header de deploy ausente"
fi

# 5. Verificar conte√∫do da aplica√ß√£o
echo "5. Verificando conte√∫do da aplica√ß√£o..."
APP_CONTENT=$(curl -s https://tutoriaiserp.com.br/ | grep -o "TutoriaisERP\|Tutoriais\|ERP" | head -1)
if [ -n "$APP_CONTENT" ]; then
    echo "‚úÖ Conte√∫do da aplica√ß√£o carregado"
else
    echo "‚ùå Problema no carregamento do conte√∫do"
fi

# 6. Testar acesso √† aplica√ß√£o
echo "6. Testando acesso √† aplica√ß√£o..."
APP_ACCESS_TEST=$(curl -s -o /dev/null -w "%{http_code}" -I "https://tutoriaiserp.com.br/" --connect-timeout 10 --max-time 30)
echo "Status da aplica√ß√£o: $APP_ACCESS_TEST"

if [ "$APP_ACCESS_TEST" = "200" ] || [ "$APP_ACCESS_TEST" = "301" ] || [ "$APP_ACCESS_TEST" = "302" ]; then
    echo "‚úÖ Aplica√ß√£o acess√≠vel"
else
    echo "‚ùå Problema no acesso √† aplica√ß√£o (Status: $APP_ACCESS_TEST)"
fi

# 7. Verificar logs do Nginx (√∫ltimas 10 linhas)
echo "7. Verificando logs recentes do Nginx..."
echo "√öltimas entradas do log de acesso:"
sudo tail -5 /var/log/nginx/access.log 2>/dev/null || echo "Log de acesso n√£o encontrado"

echo "√öltimas entradas do log de erro:"
sudo tail -5 /var/log/nginx/error.log 2>/dev/null || echo "Log de erro n√£o encontrado"

# 8. Resumo final
echo ""
echo "=== RESUMO FINAL ==="
echo "Deploy Timestamp: $TIMESTAMP"
echo "Nginx Status: $NGINX_STATUS"
echo "Dom√≠nio do Servidor (tutoriaiserp.com.br): HTTP $SERVER_HTTP_STATUS"
echo "SSL Servidor: $([ -f "/etc/letsencrypt/live/tutoriaiserp.com.br/fullchain.pem" ] && echo "‚úÖ OK" || echo "‚ùå ERRO")"

if [ "$NGINX_STATUS" = "active" ]; then
    echo ""
    echo "üéâ DEPLOY CONCLU√çDO!"
    echo "üîó Acesse: https://tutoriaiserp.com.br"
    echo "üìß Aplica√ß√£o funcionando corretamente"
    
    if [ "$SERVER_HTTP_STATUS" != "200" ] && [ "$SERVER_HTTP_STATUS" != "301" ] && [ "$SERVER_HTTP_STATUS" != "302" ]; then
        echo "‚ö†Ô∏è Nota: Servidor pode precisar de alguns minutos para estabilizar"
    fi
else
    echo ""
    echo "‚ùå DEPLOY COM PROBLEMAS CR√çTICOS"
    echo "Nginx n√£o est√° ativo - verifique os logs"
    exit 1
fi

echo "=== FIM DO TESTE FINAL ==="
